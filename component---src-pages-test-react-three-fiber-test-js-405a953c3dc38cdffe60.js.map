{"version":3,"sources":["webpack:///./src/pages/Test/react-three-fiber-test.js"],"names":["ReactThreeFiberTest","style","color","overflowY","headerText","position","top","height","zIndex","camera","onCreated","gl","shadowMap","enabled","type","THREE","fallback","center","className","children","attach","args","castShadow","Box","Plane","WelcomeLogo","setModel","useState","useEffect","GLTFLoader","load","welcomeStamp","rotation","Math","PI","receiveShadow","props","mesh","useRef","hovered","setHover","active","setActive","ref","scale","onClick","e","onPointerOver","onPointerOut"],"mappings":"6QAUe,SAASA,IACtB,OACE,yBAAKC,MAAO,CAAEC,MAAM,SAAWC,UAAW,WACxC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQC,WAAW,6BACnB,6KACA,kBAAC,IAAD,CACEH,MAAO,CAACI,SAAU,WAAYC,IAAK,IAAKC,OAAQ,QAASC,OAAQ,MACjEC,OAAS,CAAEJ,SAAS,CAAC,EAAG,EAAG,IAC3BK,UAAW,YAAa,IAAVC,EAAS,EAATA,GACZA,EAAGC,UAAUC,SAAU,EACvBF,EAAGC,UAAUE,KAAOC,qBAGtB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAAKC,QAAM,EAACC,UAAU,UAAUC,SAAS,gBAC3D,yBAAKC,OAAO,MAAMC,KAAM,CAAC,QAAS,GAAI,MACtC,+BAAWhB,SAAU,CAAC,GAAI,GAAI,IAAKiB,YAAU,IAC7C,kBAACC,EAAD,CAAKlB,SAAU,EAAE,IAAK,EAAG,KACzB,kBAACkB,EAAD,CAAKlB,SAAU,CAAC,IAAK,EAAG,KACxB,kBAACmB,EAAD,MACA,kBAACC,EAAD,OAEF,kBAAC,IAAD,QAOR,IAAMA,EAAc,WAAO,IAClBC,EAAYC,qBADK,GAOxB,OAJAC,qBAAU,YACR,IAAIC,KAAaC,KAAKC,IAAcL,MAG/B,MAGHF,EAAQ,kBACZ,0BAAMQ,SAAU,EAAEC,KAAKC,GAAG,EAAG,EAAG,GAAI7B,SAAU,CAAC,GAAI,GAAK,GAAI8B,eAAa,GACvE,yCAAqBf,OAAO,WAAWC,KAAM,CAAC,IAAI,OAClD,0CAAsBD,OAAO,WAAWlB,MAAM,YAI5CqB,EAAM,SAAAa,GAEV,IAAMC,EAAOC,mBAFM,EAKSX,oBAAS,GAA9BY,EALY,KAKHC,EALG,OAMSb,oBAAS,GAA9Bc,EANY,KAMJC,EANI,KAWnB,OACE,0CACMN,EADN,CAEEO,IAAKN,EACLO,MAAOH,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCI,QAAS,SAAAC,GAAC,OAAIJ,GAAWD,IACzBM,cAAe,SAAAD,GAAC,OAAIN,GAAS,IAC7BQ,aAAc,SAAAF,GAAC,OAAIN,GAAS,IAC5BlB,YAAU,IAEV,uCAAmBF,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,0CACED,OAAO,WACPlB,MAAOqC,EAAU,UAAY","file":"component---src-pages-test-react-three-fiber-test-js-405a953c3dc38cdffe60.js","sourcesContent":["import React, { useRef, useState, Suspense, useEffect } from \"react\"\r\nimport { Canvas, Dom} from \"react-three-fiber\"\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport { OrbitControls} from 'drei'\r\nimport welcomeStamp from '../../assets/models/welcome.glb'\r\n\r\nimport Header from \"../../components/header\"\r\nimport TopNav from \"../../components/navigation/TopNav\"\r\n\r\nexport default function ReactThreeFiberTest() {\r\n  return (\r\n    <div style={{ color: `purple`, overflowY: 'hidden'}}>\r\n      <TopNav />\r\n      <Header headerText=\"Welcome to my portfolio!\" />\r\n      <div> This version 2 of the portfolio is still in construction. It will be a React/Gatsby App featuring three.js, a 3d graphics API. Stay tuned! </div>\r\n      <Canvas \r\n        style={{position: 'absolute', top: '0', height: '100vh', zIndex: '-1' }}\r\n        camera= {{ position:[0, 0, 5] }}\r\n        onCreated={({ gl }) => {\r\n          gl.shadowMap.enabled = true\r\n          gl.shadowMap.type = THREE.PCFSoftShadowMap\r\n        }}\r\n      >\r\n        <Suspense fallback={<Dom center className=\"loading\" children=\"Loading...\" />}>\r\n          <fog attach=\"fog\" args={[\"white\", 10, 20]}/>\r\n          <spotLight position={[10, 10, 10]} castShadow/>\r\n          <Box position={[-1.2, 0, 0]} />\r\n          <Box position={[1.2, 0, 0]} />\r\n          <Plane />\r\n          <WelcomeLogo />\r\n        </Suspense>\r\n        <OrbitControls />\r\n      </Canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\n// https://github.com/react-spring/react-three-fiber/blob/master/examples/src/demos/GltfPlanet.js\r\nconst WelcomeLogo = () => {\r\n  const [setModel] = useState();\r\n\r\n  useEffect(() => {\r\n    new GLTFLoader().load(welcomeStamp, setModel);\r\n  })\r\n  //console.log(model);\r\n  return null;\r\n}\r\n\r\nconst Plane = () => (\r\n  <mesh rotation={[-Math.PI/2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>\r\n    <planeBufferGeometry attach=\"geometry\" args={[100,100]} />\r\n    <meshPhysicalMaterial attach=\"material\" color=\"white\" />\r\n  </mesh>\r\n)\r\n\r\nconst Box = props => {\r\n  // This reference will give us direct access to the mesh so we can animate it\r\n  const mesh = useRef()\r\n\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false)\r\n  const [active, setActive] = useState(false)\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  //useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\r\n\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\r\n      onClick={e => setActive(!active)}\r\n      onPointerOver={e => setHover(true)}\r\n      onPointerOut={e => setHover(false)}\r\n      castShadow\r\n    >\r\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n      <meshPhysicalMaterial\r\n        attach=\"material\"\r\n        color={hovered ? \"hotpink\" : \"orange\"}\r\n      />\r\n    </mesh>\r\n  )\r\n}\r\n\r\n"],"sourceRoot":""}